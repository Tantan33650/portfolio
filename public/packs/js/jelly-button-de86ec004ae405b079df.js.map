{"version":3,"file":"js/jelly-button-de86ec004ae405b079df.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/jelly-button.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/jelly-button.js\");\n","const LiquidButton = class LiquidButton {\n  constructor(optionsParam) {\n    const options = optionsParam || {};\n    this.tension = options.tension || 0.4;\n    this.width   = options.width   || 200;\n    this.height  = options.width   ||  50;\n    this.margin  = options.margin  ||  50;\n    this.padding = options.padding ||  17;\n    this.hoverFactor = options.hoverFactor || -0.1;\n    this.gap     = options.gap     ||   5;\n    this.debug   = options.debug   || false;\n    this.forceFactor = options.forceFactor || 0.2;\n    this.color1 = options.color1 || '#36DFE7';\n    this.color2 = options.color2 || '#8F17E1';\n    this.color3 = options.color3 || '#E509E6';\n    this.textColor = options.textColor || '#FFFFFF';\n    this.layers = [{\n      points: [],\n      viscosity: 0.5,\n      mouseForce: 100,\n      forceLimit: 2,\n    },{\n      points: [],\n      viscosity: 0.8,\n      mouseForce: 150,\n      forceLimit: 3,\n    }];\n    this.text    = options.text    || 'â–¶';\n    this.canvas  = options.canvas  || document.createElement('canvas');\n    this.context = this.canvas.getContext('2d');\n    this.wrapperElement = options.wrapperElement || document.body;\n    if (!this.canvas.parentElement) {\n      this.wrapperElement.append(this.canvas);\n    }\n    this.touches = [];\n    this.noise = options.noise || 0;\n    this.canvas.addEventListener('mousemove', this.mousemove);\n    this.canvas.addEventListener('mouseout', this.mouseout);\n    this.initOrigins();\n    this.animate();\n  }\n\n  get mousemove() {\n    return (e) => {\n      this.touches = [{\n        x: e.offsetX,\n        y: e.offsetY,\n        z: 0,\n        force: 1,\n      }];\n    };\n  }\n\n  get mouseout() {\n    return (e) => {\n      this.touches = [];\n    };\n  }\n\n  get raf() {\n    return this.__raf || (this.__raf = (\n      window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      function(callback){ setTimeout(callback, 10)}\n    ).bind(window));\n  }\n\n  distance(p1, p2) {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n  }\n\n  update() {\n    for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n      const layer = this.layers[layerIndex];\n      const points = layer.points;\n      for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {\n        const point = points[pointIndex];\n        const dx = point.ox - point.x + (Math.random() - 0.5) * this.noise;\n        const dy = point.oy - point.y + (Math.random() - 0.5) * this.noise;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        const f = d * this.forceFactor;\n        point.vx += f * ((dx / d) || 0);\n        point.vy += f * ((dy / d) || 0);\n        for (let touchIndex = 0; touchIndex < this.touches.length; touchIndex++) {\n          const touch = this.touches[touchIndex];\n          let mouseForce = layer.mouseForce;\n          if (\n            touch.x > this.margin &&\n            touch.x < this.margin + this.width &&\n            touch.y > this.margin &&\n            touch.y < this.margin + this.height\n          ) {\n            mouseForce *= -this.hoverFactor;\n          }\n          const mx = point.x - touch.x;\n          const my = point.y - touch.y;\n          const md = Math.sqrt(mx * mx + my * my);\n          const mf = Math.max(-layer.forceLimit, Math.min(layer.forceLimit, (mouseForce * touch.force) / md));\n          point.vx += mf * ((mx / md) || 0);\n          point.vy += mf * ((my / md) || 0);\n        }\n        point.vx *= layer.viscosity;\n        point.vy *= layer.viscosity;\n        point.x += point.vx;\n        point.y += point.vy;\n      }\n      for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {\n        const prev = points[(pointIndex + points.length - 1) % points.length];\n        const point = points[pointIndex];\n        const next = points[(pointIndex + points.length + 1) % points.length];\n        const dPrev = this.distance(point, prev);\n        const dNext = this.distance(point, next);\n\n        const line = {\n          x: next.x - prev.x,\n          y: next.y - prev.y,\n        };\n        const dLine = Math.sqrt(line.x * line.x + line.y * line.y);\n\n        point.cPrev = {\n          x: point.x - (line.x / dLine) * dPrev * this.tension,\n          y: point.y - (line.y / dLine) * dPrev * this.tension,\n        };\n        point.cNext = {\n          x: point.x + (line.x / dLine) * dNext * this.tension,\n          y: point.y + (line.y / dLine) * dNext * this.tension,\n        };\n      }\n    }\n  }\n\n  animate() {\n    this.raf(() => {\n      this.update();\n      this.draw();\n      this.animate();\n    });\n  }\n\n  draw() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n      const layer = this.layers[layerIndex];\n      if (layerIndex === 1) {\n        if (this.touches.length > 0) {\n          const gx = this.touches[0].x;\n          const gy = this.touches[0].y;\n          layer.color = this.context.createRadialGradient(gx, gy, this.height * 2, gx, gy, 0);\n          layer.color.addColorStop(0, this.color2);\n          layer.color.addColorStop(1, this.color3);\n        } else {\n          layer.color = this.color2;\n        }\n      } else {\n        layer.color = this.color1;\n      }\n      const points = layer.points;\n      this.context.fillStyle = layer.color;\n\n      this.context.beginPath();\n      this.context.moveTo(points[0].x, points[0].y);\n      for (let pointIndex = 1; pointIndex < points.length; pointIndex += 1) {\n        this.context.bezierCurveTo(\n          points[(pointIndex + 0) % points.length].cNext.x,\n          points[(pointIndex + 0) % points.length].cNext.y,\n          points[(pointIndex + 1) % points.length].cPrev.x,\n          points[(pointIndex + 1) % points.length].cPrev.y,\n          points[(pointIndex + 1) % points.length].x,\n          points[(pointIndex + 1) % points.length].y\n        );\n      }\n      this.context.fill();\n    }\n    this.context.fillStyle = this.textColor;\n    this.context.font = '100 ' + (this.height - this.padding * 2) + 'px sans-serif';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'middle';\n    this.context.fillText(this.text, this.canvas.width / 2, this.canvas.height / 2, this.width - this.padding * 2);\n    if (this.debug) {\n      this.drawDebug();\n    }\n  }\n\n  drawDebug() {\n    this.context.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n      const layer = this.layers[layerIndex];\n      const points = layer.points;\n      for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {\n        if (layerIndex === 0) {\n          this.context.fillStyle = this.color1;\n        } else {\n          this.context.fillStyle = this.color2;\n        }\n        const point = points[pointIndex];\n        this.context.fillRect(point.x, point.y, 1, 1);\n        this.context.fillStyle = '#000';\n        this.context.fillRect(point.cPrev.x, point.cPrev.y, 1, 1);\n        this.context.fillRect(point.cNext.x, point.cNext.y, 1, 1);\n        this.context.strokeStyle = 'rgba(0, 0, 0, 0.33)';\n        this.context.strokeWidth = 0.5;\n        this.context.beginPath();\n        this.context.moveTo(point.cPrev.x, point.cPrev.y);\n        this.context.lineTo(point.cNext.x, point.cNext.y);\n        this.context.stroke();\n      }\n    }\n  }\n\n  createPoint(x, y) {\n    return {\n      x: x,\n      y: y,\n      ox: x,\n      oy: y,\n      vx: 0,\n      vy: 0,\n    };\n  }\n\n  initOrigins() {\n    this.canvas.width = this.width + this.margin * 2;\n    this.canvas.height = this.height + this.margin * 2;\n    for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n      const layer = this.layers[layerIndex];\n      const points = [];\n      for (let x = ~~(this.height / 2); x < this.width - ~~(this.height / 2); x += this.gap) {\n        points.push(this.createPoint(\n          x + this.margin,\n          this.margin\n        ));\n      }\n      for (let alpha = ~~(this.height * 1.25); alpha >= 0; alpha -= this.gap) {\n        const angle = (Math.PI / ~~(this.height * 1.25)) * alpha;\n        points.push(this.createPoint(\n          Math.sin(angle) * this.height / 2 + this.margin + this.width - this.height / 2,\n          Math.cos(angle) * this.height / 2 + this.margin + this.height / 2\n        ));\n      }\n      for (let x = this.width - ~~(this.height / 2) - 1; x >= ~~(this.height / 2); x -= this.gap) {\n        points.push(this.createPoint(\n          x + this.margin,\n          this.margin + this.height\n        ));\n      }\n      for (let alpha = 0; alpha <= ~~(this.height * 1.25); alpha += this.gap) {\n        const angle = (Math.PI / ~~(this.height * 1.25)) * alpha;\n        points.push(this.createPoint(\n          (this.height - Math.sin(angle) * this.height / 2) + this.margin - this.height / 2,\n          Math.cos(angle) * this.height / 2 + this.margin + this.height / 2\n        ));\n      }\n      layer.points = points;\n    }\n  }\n}\n\n\nconst redraw = () => {\n  button.initOrigins();\n};\n\nlet button = new LiquidButton();\n\nvar gui = new dat.GUI();\ngui.add(button, \"debug\");\ngui.add(button, \"text\");\ngui.add(button, \"gap\", 1, 20, 1).onChange(redraw);\ngui.add(button, \"width\", 50, 500, 1).onChange(redraw);\ngui.add(button, \"height\", 10, 200, 1).onChange(redraw);\ngui.add(button, \"margin\", 10, 100, 1).onChange(redraw);\ngui.add(button, \"padding\", 0, 30, 1);\ngui.add(button, \"tension\", 0, 1, 0.01);\ngui.add(button, \"forceFactor\", 0, 1, 0.01);\ngui.add(button, \"hoverFactor\", -1, 1, 0.01);\ngui.addColor(button, \"color1\");\ngui.addColor(button, \"color2\");\ngui.addColor(button, \"color3\");\ngui.addColor(button, \"textColor\");\nfor (let layerIndex = 0; layerIndex < button.layers.length; layerIndex++) {\n  const layer = button.layers[layerIndex];\n  const folder = gui.addFolder('Layer ' + (layerIndex + 1));\n  folder.add(layer, \"viscosity\", 0, 1, 0.01);\n  folder.add(layer, \"mouseForce\", 0, 2000, 1);\n  folder.add(layer, \"forceLimit\", 0, 200, 0.1);\n  folder.open();\n}\n\nif (window.innerWidth < 1000) {\n  gui.close();\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AAqEA;AACA;AAtEA;AAAA;AAAA;AAyEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAlIA;AAAA;AAAA;AAoIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA1IA;AAAA;AAAA;AA6IA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAtLA;AAAA;AAAA;AAyLA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjNA;AAAA;AAAA;AAoNA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AA5NA;AAAA;AAAA;AA+NA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAhQA;AAAA;AAAA;AA0CA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAnDA;AAAA;AAAA;AAqDA;AACA;AAAA;AACA;AACA;AACA;AAzDA;AAAA;AAAA;AA4DA;AAIA;AAAA;AAEA;AAlEA;AACA;AADA;AAAA;AACA;AAmQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}